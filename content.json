{"pages":[{"title":"404","text":"","path":"404/index.html","date":"05-29","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"05-30","excerpt":""},{"title":"关于","text":"写博客目的 写这个博客主要是为了记录我自己的学习笔记以及遇见的各种坑，在文章中我将主要写的技术有以下方面: 1.游戏引擎：Unity、Laya、Egret 2.编程语言：Lua、C#、Phython、Java 3.设计模式 4.游戏架构 5.图形学OpenGL 当然还有闲着无聊时写的一些小游戏等等。","path":"about/index.html","date":"05-30","excerpt":""},{"title":"工具","text":"Hexo编写工具 MarkDown在线编辑MarkDown与html转换器","path":"tools/index.html","date":"05-30","excerpt":""},{"title":"游戏","text":"H5小游戏女王驾到: http://luotianyi.qicp.vip/games/QuenDrove/index.html浪味仙: http://luotianyi.qicp.vip/games/langweixian/index.html贝比玛玛: http://luotianyi.qicp.vip/games/BabeTamar/index.html邦德咖啡: http://luotianyi.qicp.vip/games/DBCoffee/index.htmlFixBody: http://luotianyi.qicp.vip/games/FixBody/index.html抛鸡蛋: http://luotianyi.qicp.vip/games/jidan/index.html辣椒人: http://luotianyi.qicp.vip/games/PepperMan/index.htmlQ米面: http://luotianyi.qicp.vip/games/QRiceFlour/index.html女王的秘密: http://luotianyi.qicp.vip/games/QueenAlice/index.html旺旺找不同: http://luotianyi.qicp.vip/games/wangwang/index.html","path":"games/index.html","date":"05-30","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"05-29","excerpt":""},{"title":"标签","text":"Hexo OpenGL Unity 设计模式","path":"tags/index.html","date":"05-30","excerpt":""}],"posts":[{"title":"关于Unity物体的销毁方法","text":"Destroy(异步销毁): 该函数并不是立即销毁物体而是给物体加了一个标识符，物体还在内存中，在下一帧时才销毁并从内存中移除。 DestroyImmediate: 立即销毁物体并移除内存。","path":"2019/05/30/关于Unity的销毁方法/","date":"05-30","excerpt":"","tags":[{"name":"Unity","slug":"Unity","permalink":"http://luotianyi.qicp.vip/tags/Unity/"}]},{"title":"软件设计模式的规则","text":"软件设计的七大原则 设计模式分为三大类：创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。其实还有两类：并发型模式和线程池模式。&nbsp;原则一：开闭原则:对修改关闭,对扩展开放&nbsp;单一职责原则:不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，否则就应该把类拆分&nbsp;里氏替换原则(Liskov Substitution Principle):里氏替换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏替换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。&nbsp;依赖倒转原则（Dependence Inversion Principle）:面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。&nbsp;接口隔离原则（Interface Segregation Principle）每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。&nbsp;迪米特法则（最少知道原则）（Demeter Principle）一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。&nbsp;合成复用原则（Composite Reuse Principle）尽量首先使用合成/聚合的方式，而不是使用继承。&nbsp;&nbsp;","path":"2019/05/30/软件设计模式的规则/","date":"05-30","excerpt":"","tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://luotianyi.qicp.vip/tags/设计模式/"}]},{"title":"OpenGL环境配置","text":"环境搭建 首先说一下自学的网址：&nbsp;https://learnopengl-cn.github.io/&nbsp;这个也是主要资料。1.GLFW下载与配置：下载地址：https://www.glfw.org/download.html建议下载32位的，据说64位会有很多问题所以我就先不用了。下载后里面有很多VS版本的类库，至于用哪一个就看使用的VS版本了。打开VS创建一个空的C++项目，然后再解决方案中右击项目打开属性页。&nbsp;2.GLAD下载与配置:打开网址&nbsp;http://glad.dav1d.de/&nbsp;按以下配置进行选择:选完后在生成后的页面下载生成后.zip文件:把解压后的include里面的两个文件夹复制到glfw的include文件夹下，当然你也可以再创建个项目进行外链。把src下的文件glad.c复制到自己的项目中去.按以下步骤把glfw3.lib和opengl32.lib加入链接器。&nbsp;&nbsp;3.测试:创建.cpp文件把下面代码复制进去，看是否出现了窗口。#include &lt;glad/glad.h&gt;#include &lt;GLFW/glfw3.h&gt;#include&lt;iostream&gt;using namespace std;void framebuffer_size_callback(GLFWwindow window, int width, int height);void processInput(GLFWwindow window);int main(){ glfwInit(); //设置glfw的版本为3.3 glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3); glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //创建窗体 GLFWwindow window = glfwCreateWindow(800, 600, “LearnOpenGL”, NULL, NULL); if (window == NULL) { std::cout &lt;&lt; “Failed to create GLFW window” &lt;&lt; std::endl; glfwTerminate(); return -1; } glfwMakeContextCurrent(window); if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) { std::cout &lt;&lt; “Failed to initialize GLAD” &lt;&lt; std::endl; return -1; } glViewport(0, 0, 800, 600); glfwSetFramebufferSizeCallback(window, framebuffer_size_callback); // 渲染循环 while (!glfwWindowShouldClose(window)) { glClearColor(0.2f, 0.3f, 0.3f, 1.0f); glClear(GL_COLOR_BUFFER_BIT); // 输入 processInput(window); // 渲染指令 // 检查并调用事件，交换缓冲 glfwPollEvents(); glfwSwapBuffers(window); } glfwTerminate(); return 0;}//当窗口改变时调用void framebuffer_size_callback(GLFWwindow window, int width, int height){ glViewport(0, 0, width, height);}//给窗体注册输入事件void processInput(GLFWwindow *window){ if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) { glfwSetWindowShouldClose(window, true); }}","path":"2019/05/30/OpenGL环境配置/","date":"05-30","excerpt":"","tags":[{"name":"OpenGL","slug":"OpenGL","permalink":"http://luotianyi.qicp.vip/tags/OpenGL/"}]},{"title":"Hexo的使用","text":"关于Hexo的主题下载: 下载地址: https://hexo.io/themes/ 一般下载的地址为github，下面有主题需要的配置步骤。 Hexo中常用的命令: 其中命令可以连用，例如:hexo d -g 生成加部署 简写 hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器 hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动 hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate –watch #监视文件变动 完成后部署 hexo generate –deployhexo deploy –generate可以直接使用 hexo d -g 草稿 hexo publish [layout] &lt;title&gt; 模版 hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo new [layout] &lt;title&gt;hexo new photo &quot;My Gallery&quot;hexo new &quot;Hello World&quot; –lang tw title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。 模版（Scaffold） hexo new photo &quot;My Gallery&quot; 设置文章摘要 以上是文章摘要 &lt;!–more–&gt; 以下是余下全文 写作 hexo new page &lt;title&gt;hexo new post &lt;title&gt; 推送到服务器上 hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 报错 ERROR Deployer not found: git 解决方法 npm install hexo-deployer-git –save 部署类型设置git hexo 3.0 部署类型不再是github，_config.yml 中修改DeploymentDocs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@*.github.com:/**.github.io.git branch: master xcodebuild xcode-select: error: tool &#39;xcodebuild&#39; requires Xcode, but active developer directory &#39;/Library/Developer/CommandLineTools&#39; is a command line tools instancenpm install bcrypt RSS不显示 安装RSS插件npm install hexo-generator-feed –save开启RSS功能编辑hexo/_config.yml，添加如下代码：rss: /atom.xml #rss地址 默认即可 开启评论 1.我使用多说代替自带的评论，在多说 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 shortname在根目录 config.yml 添加一行 disqus_shortname: jslite 是在多说注册时产生的复制到 themes\\landscape\\layout_partial\\article.ejs把1234567&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;&lt;section id=\"comments\"&gt;&lt;div id=\"disqus_thread\"&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"//disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/section&gt;&lt;% &#125; %&gt;改成 1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id=\"comments\"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;\" data-title=\"&lt;%= post.title %&gt;\" data-url=\"&lt;%= page.permalink %&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:'&lt;%= config.disqus_shortname %&gt;'&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt; Hexo文章的写法 Hexo文章支持html和MarkDown语法，你不但可以单独使用这两个语法也可以混合使用。 关于MarkDown语法规则 链接: https://www.zybuluo.com/mdeditor","path":"2019/05/30/Hexo的使用/","date":"05-30","excerpt":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://luotianyi.qicp.vip/tags/Hexo/"}]},{"title":"如何使用Hexo搭建博客网站(转)","text":"原文连接: www.cnblogs.com/fengxiongZz/p/7707219.html前言：电脑系统为window 10专业版，64位相关步骤：1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下&nbsp;&nbsp;2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择&nbsp;注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图&nbsp;&nbsp;3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README&nbsp;在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。&nbsp;&nbsp;&nbsp;4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面&nbsp;输入npm install hexo -g，开始安装Hexo&nbsp;输入hexo -v，检查hexo是否安装成功&nbsp;输入hexo init，初始化该文件夹（有点漫长的等待。。。）看到后面的&ldquo;Start blogging with Hexo！&rdquo;，激动有木有！！！！！&nbsp;输入npm install，安装所需要的组件&nbsp;输入hexo g，首次体验Hexo&nbsp;&nbsp;输入hexo s，开启服务器，访问该网址，正式体验Hexo问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入&ldquo;hexo server -p 端口号&rdquo;来改变端口号那么出现如下图就成功了&nbsp;&nbsp;&nbsp;5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）&nbsp;上图是在其文件夹里面鼠标右键，点击Git Base Here。这里&ldquo;feng&rdquo;可以替换成自己的用户名，邮箱可以替换成自己的邮箱&nbsp;输入cd ~/.ssh，检查是否由.ssh的文件夹&nbsp;输入ls，列出该文件下的内容。下图说明存在&nbsp;&nbsp;输入ssh-keygen -t rsa -C &ldquo;929762930@qq.com&rdquo;，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\\Users\\Administrator.ssh）。&nbsp;&nbsp;&nbsp;输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent&nbsp;&nbsp;再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent&nbsp;&nbsp;登录Github，点击头像下的settings，添加ssh&nbsp;&nbsp;新建一个new ssh key，将id_rsa.pub文件里的内容复制上去&nbsp;输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决首先，清除所有的key-pairssh-add -Drm -r ~/.ssh删除你在github中的public-key重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“接下来正常操作在github上添加公钥public-key:1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板2、在github上添加公钥时，直接复制即可3、保存 测试：在终端 ssh -T git@github.com &nbsp;6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）&nbsp;&nbsp;repo值是你在github项目里的ssh（右下角）&nbsp;7、新建一篇博客，在cmd执行命令：hexo new post &ldquo;博客名&rdquo;&nbsp;&nbsp;这时候在文件夹_posts目录下将会看到已经创建的文件&nbsp;在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save&nbsp;使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了&nbsp;&nbsp;部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章&nbsp;&nbsp;好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来是进阶的操作","path":"2019/05/29/如何使用Hexo搭建博客网站/","date":"05-29","excerpt":"","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://luotianyi.qicp.vip/tags/Hexo/"}]}]}